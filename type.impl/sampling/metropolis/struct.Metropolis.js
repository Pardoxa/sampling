(function() {
    var type_impls = Object.fromEntries([["sampling",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#26\">Source</a><a href=\"#impl-Clone-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, R: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, Res: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#26\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sampling::metropolis::MetF64","sampling::metropolis::MetF32","sampling::metropolis::MetUsize","sampling::metropolis::MetU128","sampling::metropolis::MetU64","sampling::metropolis::MetU32","sampling::metropolis::MetU16","sampling::metropolis::MetU8","sampling::metropolis::MetIsize","sampling::metropolis::MetI128","sampling::metropolis::MetI64","sampling::metropolis::MetI32","sampling::metropolis::MetI16","sampling::metropolis::MetI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#27\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, E, R, S, Res, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    R: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#27\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(__deserializer: __D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, __D::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","sampling::metropolis::MetF64","sampling::metropolis::MetF32","sampling::metropolis::MetUsize","sampling::metropolis::MetU128","sampling::metropolis::MetU64","sampling::metropolis::MetU32","sampling::metropolis::MetU16","sampling::metropolis::MetU8","sampling::metropolis::MetIsize","sampling::metropolis::MetI128","sampling::metropolis::MetI64","sampling::metropolis::MetI32","sampling::metropolis::MetI16","sampling::metropolis::MetI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasRng%3CR%3E-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#526-536\">Source</a><a href=\"#impl-HasRng%3CR%3E-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, R, S, Res, T&gt; <a class=\"trait\" href=\"sampling/traits/trait.HasRng.html\" title=\"trait sampling::traits::HasRng\">HasRng</a>&lt;R&gt; for <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand/rng/trait.Rng.html\" title=\"trait rand::rng::Rng\">Rng</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.rng\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#529-531\">Source</a><a href=\"#method.rng\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sampling/traits/trait.HasRng.html#tymethod.rng\" class=\"fn\">rng</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut R</a></h4></section></summary><div class='docblock'>Access RNG <a href=\"sampling/traits/trait.HasRng.html#tymethod.rng\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.swap_rng\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#533-535\">Source</a><a href=\"#method.swap_rng\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"sampling/traits/trait.HasRng.html#tymethod.swap_rng\" class=\"fn\">swap_rng</a>(&amp;mut self, rng: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut R</a>)</h4></section></summary><div class='docblock'>If you need to exchange the internal rng <a href=\"sampling/traits/trait.HasRng.html#tymethod.swap_rng\">Read more</a></div></details></div></details>","HasRng<R>","sampling::metropolis::MetF64","sampling::metropolis::MetF32","sampling::metropolis::MetUsize","sampling::metropolis::MetU128","sampling::metropolis::MetU64","sampling::metropolis::MetU32","sampling::metropolis::MetU16","sampling::metropolis::MetU8","sampling::metropolis::MetIsize","sampling::metropolis::MetI128","sampling::metropolis::MetI64","sampling::metropolis::MetI32","sampling::metropolis::MetI16","sampling::metropolis::MetI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#145-524\">Source</a><a href=\"#impl-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, R, S, Res, T&gt; <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;<div class=\"where\">where\n    R: <a class=\"trait\" href=\"https://rust-random.github.io/rand/rand/rng/trait.Rng.html\" title=\"trait rand::rng::Rng\">Rng</a>,\n    E: <a class=\"trait\" href=\"sampling/traits/trait.MarkovChain.html\" title=\"trait sampling::traits::MarkovChain\">MarkovChain</a>&lt;S, Res&gt;,\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_from_m_beta\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#162-189\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.new_from_m_beta\" class=\"fn\">new_from_m_beta</a>(\n    rng: R,\n    ensemble: E,\n    energy: T,\n    m_beta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>,\n    step_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"sampling/metropolis/enum.MetropolisError.html\" title=\"enum sampling::metropolis::MetropolisError\">MetropolisError</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"create-a-new-metropolis-struct---used-for-metropolis-simulations\"><a class=\"doc-anchor\" href=\"#create-a-new-metropolis-struct---used-for-metropolis-simulations\">§</a>Create a new Metropolis struct - used for Metropolis simulations</h5><div><table><thead><tr><th></th><th>meaning</th></tr></thead><tbody>\n<tr><td><code>rng</code></td><td>the Rng used to decide, if a state should be accepted or rejected</td></tr>\n<tr><td><code>ensemble</code></td><td>the ensemble that is explored with the markov chain</td></tr>\n<tr><td><code>energy</code></td><td>current energy of the ensemble - cannot be NAN, should match <code>energy_fn(ensemble)</code> (see <code>metropolis*</code> functions)</td></tr>\n<tr><td><code>m_beta</code></td><td>minus beta, has to be finite - used for acceptance, i.e., probability to accept a markov step from Energy E to Energy E_new is min[1.0, exp{m_beta * (E_new - E)}]</td></tr>\n<tr><td><code>step_size</code></td><td>is used for each markov step, i.e., <code>ensemble.m_steps(stepsize)</code> is called</td></tr>\n</tbody></table>\n</div>\n<ul>\n<li>will return Err if <code>energy</code> is nan or <code>m_beta</code> is not finite</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.new_from_temperature\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#202-220\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.new_from_temperature\" class=\"fn\">new_from_temperature</a>(\n    rng: R,\n    ensemble: E,\n    energy: T,\n    temperature: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>,\n    step_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, <a class=\"enum\" href=\"sampling/metropolis/enum.MetropolisError.html\" title=\"enum sampling::metropolis::MetropolisError\">MetropolisError</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"create-a-new-metropolis-struct---used-for-metropolis-simulations-1\"><a class=\"doc-anchor\" href=\"#create-a-new-metropolis-struct---used-for-metropolis-simulations-1\">§</a>Create a new Metropolis struct - used for Metropolis simulations</h5><div><table><thead><tr><th></th><th>meaning</th></tr></thead><tbody>\n<tr><td><code>rng</code></td><td>the Rng used to decide, if a state should be accepted or rejected</td></tr>\n<tr><td><code>ensemble</code></td><td>the ensemble that is explored with the markov chain</td></tr>\n<tr><td><code>energy</code></td><td>current energy of the ensemble - cannot be NAN, should match <code>energy_fn(ensemble)</code> (see <code>metropolis*</code> functions)</td></tr>\n<tr><td><code>temperature</code></td><td>m_beta = -1.0/temperature. Used for acceptance, i.e., probability to accept a markov step from Energy E to Energy E_new is min[1.0, exp{m_beta * (E_new - E)}]</td></tr>\n<tr><td><code>step_size</code></td><td>is used for each markov step, i.e., <code>ensemble.m_steps(stepsize)</code> is called</td></tr>\n</tbody></table>\n</div>\n<ul>\n<li>will return Err if <code>energy</code> is nan or <code>m_beta</code> is not finite</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.change_markov_chain\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#225-238\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.change_markov_chain\" class=\"fn\">change_markov_chain</a>&lt;S2, Res2&gt;(self) -&gt; <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S2, Res2, T&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"sampling/traits/trait.MarkovChain.html\" title=\"trait sampling::traits::MarkovChain\">MarkovChain</a>&lt;S2, Res2&gt;,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"change-which-markov-chain-is-used-for-the-metropolis-simulations\"><a class=\"doc-anchor\" href=\"#change-which-markov-chain-is-used-for-the-metropolis-simulations\">§</a>Change, which markov chain is used for the metropolis simulations</h5>\n<ul>\n<li>Use this if there are different ways to perform a markov chain for your problem\nand you want to switch between them</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#312-326\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis\" class=\"fn\">metropolis</a>&lt;Energy, Mes&gt;(\n    &amp;mut self,\n    step_target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    energy_fn: Energy,\n    measure: Mes,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self),</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation\"><a class=\"doc-anchor\" href=\"#metropolis-simulation\">§</a>Metropolis Simulation</h5>\n<ul>\n<li><a href=\"#all-selfmetropolis-functions-do-the-following\">see</a></li>\n<li>performs <code>self.counter..=step_target</code> markov steps</li>\n<li><code>energy_fn(self.ensemble)</code> is assumed to equal <code>self.energy</code> at the beginning!</li>\n<li>if <code>energy_fn</code> returns None, the step will always be rejected</li>\n<li>after each acceptance/rejection, <code>measure</code> is called</li>\n</ul>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<ul>\n<li>I assume, that the energy_fn never returns <code>nan</code> (when cast as f64)\nIf nan is possible, please check for that beforehand and return <code>None</code> in that case</li>\n<li>Maybe do the same for infinity, it is unlikely, that an infinite energy makes sense</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#345-359\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_unsafe\" class=\"fn\">metropolis_unsafe</a>&lt;Energy, Mes&gt;(\n    &amp;mut self,\n    step_target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    energy_fn: Energy,\n    measure: Mes,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self),</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-1\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-1\">§</a>Metropolis Simulation</h5>\n<ul>\n<li><a href=\"#all-selfmetropolis-functions-do-the-following\">see</a></li>\n<li>performs <code>self.counter..=step_target</code> markov steps</li>\n<li><code>energy_fn(self.ensemble)</code> is assumed to equal <code>self.energy</code> at the beginning!</li>\n<li>if <code>energy_fn</code> returns None, the step will always be rejected</li>\n<li>after each acceptance/rejection, <code>measure</code> is called</li>\n</ul>\n<h5 id=\"important\"><a class=\"doc-anchor\" href=\"#important\">§</a>Important</h5>\n<ul>\n<li>if possible, prefer <a href=\"#method.metropolis\"><code>self.metropolis</code></a> as it is safer</li>\n<li>use this, if your energy function needs mutable access, or <code>measure</code>needs mutable access.\nBe careful though, this can invalidate the results of your simulation</li>\n</ul>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<ul>\n<li>I assume, that the energy_fn never returns <code>nan</code> (when cast as f64)\nIf nan is possible, please check for that beforehand and return <code>None</code> in that case</li>\n<li>Maybe do the same for infinity, it is unlikely, that an infinite energy makes sense</li>\n<li>Note: I chose to make this function unsafe to force users to acknowledge the (purely logical) limitations\nregarding the usage of the mutable ensemble. From a programming point of view this will not lead to\nany undefined behavior or such regardless of if the user fulfills the requirements</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_efficient\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#375-390\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_efficient\" class=\"fn\">metropolis_efficient</a>&lt;Energy, Mes&gt;(\n    &amp;mut self,\n    step_target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    energy_fn: Energy,\n    measure: Mes,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;E</a>, T, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[S]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self),</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-2\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-2\">§</a>Metropolis Simulation</h5>\n<ul>\n<li><a href=\"#all-selfmetropolis-functions-do-the-following\">see</a></li>\n<li>performs <code>self.counter..=step_target</code> markov steps</li>\n<li><code>energy_fn(self.ensemble)</code> is assumed to equal <code>self.energy</code> at the beginning!</li>\n<li>if <code>energy_fn</code> returns None, the step will always be rejected</li>\n<li>after each acceptance/rejection, <code>measure</code> is called</li>\n</ul>\n<h5 id=\"difference-to-selfmetropolis\"><a class=\"doc-anchor\" href=\"#difference-to-selfmetropolis\">§</a>Difference to <a href=\"#method.metropolis\"><code>self.metropolis</code></a></h5>\n<ul>\n<li>Function parameter of energy_fn: &amp;ensemble, old_energy, &amp;[steps] - that\nmeans, you should prefer this, if you can calculate the new energy more efficient\nby accessing the old energy and the information about what the markov step changed</li>\n</ul>\n<h5 id=\"note-1\"><a class=\"doc-anchor\" href=\"#note-1\">§</a>Note</h5>\n<ul>\n<li>I assume, that the energy_fn never returns <code>nan</code> (when cast as f64)\nIf nan is possible, please check for that beforehand and return <code>None</code> in that case</li>\n<li>Maybe do the same for infinity, it is unlikely, that an infinite energy makes sense</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_efficient_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#406-421\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_efficient_unsafe\" class=\"fn\">metropolis_efficient_unsafe</a>&lt;Energy, Mes&gt;(\n    &amp;mut self,\n    step_target: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>,\n    energy_fn: Energy,\n    measure: Mes,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.Fn.html\" title=\"trait core::ops::function::Fn\">Fn</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut E</a>, T, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[S]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self),</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-3\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-3\">§</a>Metropolis Simulation</h5>\n<ul>\n<li><a href=\"#all-selfmetropolis-functions-do-the-following\">see</a></li>\n<li>performs <code>self.counter..=step_target</code> markov steps</li>\n<li><code>energy_fn(self.ensemble)</code> is assumed to equal <code>self.energy</code> at the beginning!</li>\n<li>if <code>energy_fn</code> returns None, the step will always be rejected</li>\n<li>after each acceptance/rejection, <code>measure</code> is called</li>\n</ul>\n<h5 id=\"difference-to-selfmetropolis-1\"><a class=\"doc-anchor\" href=\"#difference-to-selfmetropolis-1\">§</a>Difference to <a href=\"#method.metropolis\"><code>self.metropolis</code></a></h5>\n<ul>\n<li>Function parameter of energy_fn: &amp;ensemble, old_energy, &amp;[steps] - that\nmeans, you should prefer this, if you can calculate the new energy more efficient\nby accessing the old energy and the information about what the markov step changed</li>\n</ul>\n<h5 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h5>\n<ul>\n<li>I assume, that the energy_fn never returns <code>nan</code> (when cast as f64)\nIf nan is possible, please check for that beforehand and return <code>None</code> in that case</li>\n<li>Maybe do the same for infinity, it is unlikely, that an infinite energy makes sense</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_while\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#434-448\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_while\" class=\"fn\">metropolis_while</a>&lt;Energy, Mes, Cond&gt;(\n    &amp;mut self,\n    energy_fn: Energy,\n    measure: Mes,\n    condition: Cond,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self),\n    Cond: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-4\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-4\">§</a>Metropolis Simulation</h5>\n<ul>\n<li><a href=\"#all-selfmetropolis-functions-do-the-following\">see</a></li>\n<li>checks <code>condition(self)</code> after each <code>metropolis_step(&amp;mut energy_fn)</code>\nand returns when <code>false</code> is returned by the condition</li>\n<li><code>energy_fn(self.ensemble)</code> is assumed to equal <code>self.energy</code> at the beginning!</li>\n<li>if <code>energy_fn</code> returns None, the step will always be rejected</li>\n<li>after each acceptance/rejection, <code>measure</code> is called</li>\n</ul>\n<h5 id=\"note-2\"><a class=\"doc-anchor\" href=\"#note-2\">§</a>Note</h5>\n<ul>\n<li>I assume, that the energy_fn never returns <code>nan</code> (when cast as f64)\nIf nan is possible, please check for that beforehand and return <code>None</code> in that case</li>\n<li>Maybe do the same for infinity, it is unlikely, that an infinite energy makes sense</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_while_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#462-476\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_while_unsafe\" class=\"fn\">metropolis_while_unsafe</a>&lt;Energy, Mes, Cond&gt;(\n    &amp;mut self,\n    energy_fn: Energy,\n    measure: Mes,\n    condition: Cond,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut E</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self),\n    Cond: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-5\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-5\">§</a>Metropolis simulation</h5>\n<ul>\n<li>almost the same as <a href=\"sampling/metropolis/struct.Metropolis.html#method.metropolis_while\" title=\"method sampling::metropolis::Metropolis::metropolis_while\"><code>metropolis_while</code></a></li>\n</ul>\n<h6 id=\"difference\"><a class=\"doc-anchor\" href=\"#difference\">§</a>Difference</h6>\n<ul>\n<li><code>energy_fn</code> now works with a mutable reference of <code>E</code> (the ensemble).</li>\n</ul>\n<h6 id=\"note-3\"><a class=\"doc-anchor\" href=\"#note-3\">§</a>Note</h6>\n<ul>\n<li>prefer <a href=\"sampling/metropolis/struct.Metropolis.html#method.metropolis_while\" title=\"method sampling::metropolis::Metropolis::metropolis_while\"><code>metropolis_while</code></a> as it is safer.</li>\n<li>the changing of the Ensemble must not affect subsequent Energy calculations - otherwise the\nlogic of the algorithm breaks down</li>\n</ul>\n<h6 id=\"safety-2\"><a class=\"doc-anchor\" href=\"#safety-2\">§</a>Safety</h6>\n<ul>\n<li>Note: I chose to make this function unsafe to force users to acknowledge the (purely logical) limitations\nregarding the usage of the mutable ensemble. From a programming point of view this will not lead to\nany undefined behavior or such regardless of if the user fulfills the requirements</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_efficient_while\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#482-496\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_efficient_while\" class=\"fn\">metropolis_efficient_while</a>&lt;Energy, Mes, Cond&gt;(\n    &amp;mut self,\n    energy_fn: Energy,\n    measure: Mes,\n    condition: Cond,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;E</a>, T, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[S]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self),\n    Cond: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-6\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-6\">§</a>Metropolis simulation</h5>\n<ul>\n<li>similar to <a href=\"sampling/metropolis/struct.Metropolis.html#method.metropolis_while\" title=\"method sampling::metropolis::Metropolis::metropolis_while\"><code>metropolis_while</code></a></li>\n</ul>\n<h6 id=\"difference-1\"><a class=\"doc-anchor\" href=\"#difference-1\">§</a>Difference</h6>\n<ul>\n<li>energy fn can use the old energy and the performed markov steps to more efficiently calculate the current Energy</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.metropolis_efficient_while_unsafe\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#507-521\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.metropolis_efficient_while_unsafe\" class=\"fn\">metropolis_efficient_while_unsafe</a>&lt;Energy, Mes, Cond&gt;(\n    &amp;mut self,\n    energy_fn: Energy,\n    measure: Mes,\n    condition: Cond,\n)<div class=\"where\">where\n    Energy: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut E</a>, T, &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.slice.html\">[S]</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;T&gt;,\n    Mes: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self),\n    Cond: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(&amp;mut Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"metropolis-simulation-7\"><a class=\"doc-anchor\" href=\"#metropolis-simulation-7\">§</a>Metropolis simulation</h5>\n<ul>\n<li>similar to <a href=\"sampling/metropolis/struct.Metropolis.html#method.metropolis_efficient_while\" title=\"method sampling::metropolis::Metropolis::metropolis_efficient_while\"><code>metropolis_efficient_while</code></a></li>\n</ul>\n<h6 id=\"difference-2\"><a class=\"doc-anchor\" href=\"#difference-2\">§</a>Difference</h6>\n<ul>\n<li>now <code>energy_fn</code> works with a mutable reference of the ensemble instead</li>\n<li>This is intended for usages in which the energy can be calculated much more efficiently using a\nmutable reference than an immutable one</li>\n</ul>\n<h6 id=\"safety-3\"><a class=\"doc-anchor\" href=\"#safety-3\">§</a>Safety</h6>\n<ul>\n<li>Only use this, if it is absolutely necessary. The ensemble must not be changed in a way,\nwhich affects successive energy calculations (or the markov steps)</li>\n</ul>\n</div></details></div></details>",0,"sampling::metropolis::MetF64","sampling::metropolis::MetF32","sampling::metropolis::MetUsize","sampling::metropolis::MetU128","sampling::metropolis::MetU64","sampling::metropolis::MetU32","sampling::metropolis::MetU16","sampling::metropolis::MetU8","sampling::metropolis::MetIsize","sampling::metropolis::MetI128","sampling::metropolis::MetI64","sampling::metropolis::MetI32","sampling::metropolis::MetI16","sampling::metropolis::MetI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#55-143\">Source</a><a href=\"#impl-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;R, E, S, Res, T&gt; <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a> + <a class=\"trait\" href=\"https://docs.rs/num-traits/0.2/num_traits/cast/trait.AsPrimitive.html\" title=\"trait num_traits::cast::AsPrimitive\">AsPrimitive</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.m_beta\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#60-62\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.m_beta\" class=\"fn\">m_beta</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a></h4></section></summary><div class=\"docblock\"><p>returns stored <code>m_beta</code> value (-β for metropolis)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_m_beta\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#65-68\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.set_m_beta\" class=\"fn\">set_m_beta</a>(&amp;mut self, m_beta: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class=\"docblock\"><p>sets m_beta (minus beta). Is related to the temperature: m_beta = -1 / temperature</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_temperature\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#71-74\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.set_temperature\" class=\"fn\">set_temperature</a>(&amp;mut self, temperature: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>)</h4></section></summary><div class=\"docblock\"><p>sets m_beta according to m_beta = -1 / temperature</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.energy\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#77-79\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.energy\" class=\"fn\">energy</a>(&amp;self) -&gt; T</h4></section></summary><div class=\"docblock\"><p>returns stored value for <code>current_energy</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_energy\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#89-91\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.set_energy\" class=\"fn\">set_energy</a>(&amp;mut self, energy: T)</h4></section></summary><div class=\"docblock\"><h5 id=\"set-stored-value-for-current_energy\"><a class=\"doc-anchor\" href=\"#set-stored-value-for-current_energy\">§</a>set stored value for <code>current_energy</code></h5>\n<ul>\n<li>This function does not check if the new energy you set makes any sense at all</li>\n</ul>\n<h5 id=\"important\"><a class=\"doc-anchor\" href=\"#important\">§</a>Important</h5>\n<ul>\n<li>It is very unlikely that you need this function - Only use it, if you know what you are doing</li>\n</ul>\n<h6 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h6>\n<p>This is not unsafe in the programming sense, but I chose to make it unsafe anyway to make the user\nacknowledge that this will result in a logical error for the algorithms if\nset to the incorrect energy</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ensemble\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#94-97\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.ensemble\" class=\"fn\">ensemble</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;E</a></h4></section></summary><div class=\"docblock\"><p>returns reference to ensemble</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ensemble_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#106-109\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.ensemble_mut\" class=\"fn\">ensemble_mut</a>(&amp;mut self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;mut E</a></h4></section></summary><div class=\"docblock\"><p>returns mutable reference to ensemble</p>\n<ul>\n<li>use with care!</li>\n</ul>\n<h6 id=\"safety-1\"><a class=\"doc-anchor\" href=\"#safety-1\">§</a>Safety</h6>\n<ul>\n<li>if you change your ensemble, this might invalidate\nthe simulation!</li>\n<li>The metropolis functions do not calculate the energy of the current state</li>\n<li>Unsafe purely for logical reasons, in the programming sense this function didn’t need to be unsafe</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.counter\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#116-118\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.counter\" class=\"fn\">counter</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-stored-value-for-the-counter-ie-where-to-resume-iteration\"><a class=\"doc-anchor\" href=\"#returns-stored-value-for-the-counter-ie-where-to-resume-iteration\">§</a>returns stored value for the <code>counter</code>, i.e., where to resume iteration</h5>\n<ul>\n<li>note: <code>counter</code>  is a wrapping counter</li>\n<li>counter is increase each time, a markov step is performed, i.e,\neach time <code>ensemble.m_steps(step_size)</code> is called, the counter will increase by 1\n(<strong>not</strong> by step_size)</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset_counter\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#122-124\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.reset_counter\" class=\"fn\">reset_counter</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><h5 id=\"resets-the-counter-to-0\"><a class=\"doc-anchor\" href=\"#resets-the-counter-to-0\">§</a>resets the <code>counter</code> to 0</h5>\n<ul>\n<li>note: <code>counter</code>  is a wrapping counter</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.step_size\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#127-129\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.step_size\" class=\"fn\">step_size</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>return current <code>stepsize</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.set_step_size\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#133-141\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/metropolis/struct.Metropolis.html#tymethod.set_step_size\" class=\"fn\">set_step_size</a>(&amp;mut self, step_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"sampling/histogram/enum.Outcome.html\" title=\"enum sampling::histogram::Outcome\">Outcome</a></h4></section></summary><div class=\"docblock\"><ul>\n<li>change the <code>stepsize</code></li>\n<li>returns Failure if you try to set stepsize to <code>0</code>, because that would be invalid</li>\n</ul>\n</div></details></div></details>",0,"sampling::metropolis::MetF64","sampling::metropolis::MetF32","sampling::metropolis::MetUsize","sampling::metropolis::MetU128","sampling::metropolis::MetU64","sampling::metropolis::MetU32","sampling::metropolis::MetU16","sampling::metropolis::MetU8","sampling::metropolis::MetIsize","sampling::metropolis::MetI128","sampling::metropolis::MetI64","sampling::metropolis::MetI32","sampling::metropolis::MetI16","sampling::metropolis::MetI8"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#27\">Source</a><a href=\"#impl-Serialize-for-Metropolis%3CE,+R,+S,+Res,+T%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;E, R, S, Res, T&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"sampling/metropolis/struct.Metropolis.html\" title=\"struct sampling::metropolis::Metropolis\">Metropolis</a>&lt;E, R, S, Res, T&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    R: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    T: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/metropolis/metropolis.rs.html#27\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(&amp;self, __serializer: __S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;__S::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, __S::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","sampling::metropolis::MetF64","sampling::metropolis::MetF32","sampling::metropolis::MetUsize","sampling::metropolis::MetU128","sampling::metropolis::MetU64","sampling::metropolis::MetU32","sampling::metropolis::MetU16","sampling::metropolis::MetU8","sampling::metropolis::MetIsize","sampling::metropolis::MetI128","sampling::metropolis::MetI64","sampling::metropolis::MetI32","sampling::metropolis::MetI16","sampling::metropolis::MetI8"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[49982]}