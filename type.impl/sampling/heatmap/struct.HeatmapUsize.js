(function() {
    var type_impls = Object.fromEntries([["sampling",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#24\">Source</a><a href=\"#impl-Clone-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;HistWidth: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, HistHeight: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#24\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.86.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","sampling::heatmap::heatmap::HeatmapU"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#24\">Source</a><a href=\"#impl-Debug-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;HistWidth: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, HistHeight: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#24\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.86.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","sampling::heatmap::heatmap::HeatmapU"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#25\">Source</a><a href=\"#impl-Deserialize%3C'de%3E-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, HistWidth, HistHeight&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistWidth: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    HistHeight: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#25\">Source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(__deserializer: __D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, __D::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.219/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","sampling::heatmap::heatmap::HeatmapU"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#167-748\">Source</a><a href=\"#impl-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;HistWidth, HistHeight&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistWidth: <a class=\"trait\" href=\"sampling/histogram/trait.Histogram.html\" title=\"trait sampling::histogram::Histogram\">Histogram</a>,\n    HistHeight: <a class=\"trait\" href=\"sampling/histogram/trait.Histogram.html\" title=\"trait sampling::histogram::Histogram\">Histogram</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#178-192\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.new\" class=\"fn\">new</a>(width_hist: HistWidth, height_hist: HistHeight) -&gt; Self</h4></section></summary><div class=\"docblock\"><h5 id=\"create-a-new-heatmap\"><a class=\"doc-anchor\" href=\"#create-a-new-heatmap\">§</a>Create a new Heatmap</h5>\n<ul>\n<li>heatmap will have width <code>width_hist.bin_count()</code>\nand height <code>height_hist.bin_count()</code></li>\n<li>histograms will be reset (zeroed) here, so it does not matter, if they\nwere used before and contain Data</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.reset\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#198-204\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.reset\" class=\"fn\">reset</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><h5 id=\"reset\"><a class=\"doc-anchor\" href=\"#reset\">§</a>Reset</h5>\n<ul>\n<li>resets histograms</li>\n<li>heatmap is reset to contain only 0’s</li>\n<li>miss_count is reset to 0</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.combine\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#209-244\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.combine\" class=\"fn\">combine</a>&lt;OtherHW, OtherHH&gt;(\n    &amp;mut self,\n    other: &amp;<a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;OtherHW, OtherHH&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>, <a class=\"enum\" href=\"sampling/heatmap/enum.HeatmapError.html\" title=\"enum sampling::heatmap::HeatmapError\">HeatmapError</a>&gt;<div class=\"where\">where\n    OtherHW: <a class=\"trait\" href=\"sampling/histogram/trait.Histogram.html\" title=\"trait sampling::histogram::Histogram\">Histogram</a>,\n    OtherHH: <a class=\"trait\" href=\"sampling/histogram/trait.Histogram.html\" title=\"trait sampling::histogram::Histogram\">Histogram</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"combine-heatmaps\"><a class=\"doc-anchor\" href=\"#combine-heatmaps\">§</a>“combine” heatmaps</h5>\n<ul>\n<li>heatmaps will be combined by adding all entries of <code>other</code> to <code>self</code></li>\n<li>heatmaps have to have the same dimensions</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.total\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#249-255\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.total\" class=\"fn\">total</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"counts-how-often-the-heatmap-was-hit\"><a class=\"doc-anchor\" href=\"#counts-how-often-the-heatmap-was-hit\">§</a>counts how often the heatmap was hit</h5>\n<ul>\n<li>should be equal to <code>self.heatmap.iter().sum::&lt;usize&gt;()</code> but more efficient</li>\n<li>Note: it calculates this in O(min(self.width, self.height))</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.total_misses\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#275-278\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.total_misses\" class=\"fn\">total_misses</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"counts-how-often-the-heatmap-was-missed-ie-you-tried-to-count-a-value-xy-which-was-outside-the-heatmap\"><a class=\"doc-anchor\" href=\"#counts-how-often-the-heatmap-was-missed-ie-you-tried-to-count-a-value-xy-which-was-outside-the-heatmap\">§</a>Counts how often the Heatmap was missed, i.e., you tried to count a value (x,y), which was outside the Heatmap</h5></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bins_hit\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#281-287\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.bins_hit\" class=\"fn\">bins_hit</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"counts-how-many-bins-of-the-heatmap-where-hit-at-least-once\"><a class=\"doc-anchor\" href=\"#counts-how-many-bins-of-the-heatmap-where-hit-at-least-once\">§</a>counts how many bins of the heatmap where hit at least once</h5></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.bins_not_hit\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#290-296\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.bins_not_hit\" class=\"fn\">bins_not_hit</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"counts-how-many-bins-of-the-heatmap-where-never-hit\"><a class=\"doc-anchor\" href=\"#counts-how-many-bins-of-the-heatmap-where-never-hit\">§</a>counts how many bins of the heatmap where never hit</h5></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.heatmap\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#305-308\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.heatmap\" class=\"fn\">heatmap</a>(&amp;self) -&gt; &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-heatmap\"><a class=\"doc-anchor\" href=\"#returns-heatmap\">§</a>returns heatmap</h5>\n<ul>\n<li>each vector entry will contain the number of times, the corresponding bin was hit</li>\n<li>an entry is 0 if it was never hit</li>\n</ul>\n<h5 id=\"access-indices-understanding-how-the-data-is-mapped\"><a class=\"doc-anchor\" href=\"#access-indices-understanding-how-the-data-is-mapped\">§</a>Access indices; understanding how the data is mapped</h5>\n<ul>\n<li>A specific heatmap location <code>(x,y)</code>\ncorresponds to the index <code>y * self.width() + x</code></li>\n<li>you can use the <code>heatmap_index</code> function to calculate the index</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_normalized\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#318-335\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.vec_normalized\" class=\"fn\">vec_normalized</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-vector-representing-normalized-heatmap\"><a class=\"doc-anchor\" href=\"#returns-vector-representing-normalized-heatmap\">§</a>returns Vector representing normalized heatmap</h5>\n<ul>\n<li>Vector contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of this Vector is 1.0 (or at least very close to 1.0)</li>\n</ul>\n<h5 id=\"access-indices-understanding-how-the-data-is-mapped-1\"><a class=\"doc-anchor\" href=\"#access-indices-understanding-how-the-data-is-mapped-1\">§</a>Access indices; understanding how the data is mapped</h5>\n<ul>\n<li>A specific heatmap location (x,y)\ncorresponds to the index <code>y * self.width() + x</code></li>\n<li>you can use the function <code>heatmap_index(width, x, y)</code> for calculating the index</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.heatmap_normalized\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#341-355\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.heatmap_normalized\" class=\"fn\">heatmap_normalized</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapF64.html\" title=\"struct sampling::heatmap::HeatmapF64\">HeatmapF64</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistHeight: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    HistWidth: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-normalized-heatmap\"><a class=\"doc-anchor\" href=\"#returns-normalized-heatmap\">§</a>returns normalized heatmap</h5>\n<ul>\n<li>returns normalized heatmap as <code>HeatmapF64</code></li>\n<li>Heatmap vector <code>self.heatmap_normalized().heatmap()</code> contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of this Vector is 1.0 (within numerical errors)</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_heatmap_normalized\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#361-373\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.into_heatmap_normalized\" class=\"fn\">into_heatmap_normalized</a>(self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapF64.html\" title=\"struct sampling::heatmap::HeatmapF64\">HeatmapF64</a>&lt;HistWidth, HistHeight&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-normalized-heatmap-1\"><a class=\"doc-anchor\" href=\"#returns-normalized-heatmap-1\">§</a>returns normalized heatmap</h5>\n<ul>\n<li>returns normalized heatmap as <code>HeatmapF64</code></li>\n<li>Heatmap vector <code>self.heatmap_normalized().heatmap()</code> contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of this Vector is 1.0 (within numerical errors)</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_normalized_columns\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#384-407\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.vec_normalized_columns\" class=\"fn\">vec_normalized_columns</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-vector-representing-heatmap-normalized-column-wise\"><a class=\"doc-anchor\" href=\"#returns-vector-representing-heatmap-normalized-column-wise\">§</a>returns vector representing heatmap, normalized column wise</h5>\n<ul>\n<li>Vector contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of each column (fixed x) will be 1.0 (within numerical errors), if it contained at least one hit.\nIf it did not, the column will only consist of 0.0</li>\n</ul>\n<h5 id=\"access-indices-understanding-how-the-data-is-mapped-2\"><a class=\"doc-anchor\" href=\"#access-indices-understanding-how-the-data-is-mapped-2\">§</a>Access indices; understanding how the data is mapped</h5>\n<p>A specific heatmap location (x,y)\ncorresponds to the index <code>y * self.width() + x</code></p>\n<ul>\n<li>you can use the function <code>heatmap_index(width, x, y)</code> for calculating the index</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.heatmap_normalized_columns\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#415-429\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.heatmap_normalized_columns\" class=\"fn\">heatmap_normalized_columns</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapF64.html\" title=\"struct sampling::heatmap::HeatmapF64\">HeatmapF64</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistHeight: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    HistWidth: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-column-wise-normalized-heatmap\"><a class=\"doc-anchor\" href=\"#returns-column-wise-normalized-heatmap\">§</a>returns (column wise) normalized heatmap</h5>\n<ul>\n<li>returns normalized heatmap as <code>HeatmapF64</code></li>\n<li>Heatmap vector <code>self.heatmap_normalized().heatmap()</code> contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of each column (fixed x) will be 1.0 (within numerical errors), if it contained at least one hit.\nIf it did not, the column will only consist of 0.0</li>\n<li>otherwise the sum of this Vector is 1.0</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_heatmap_normalized_columns\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#437-449\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.into_heatmap_normalized_columns\" class=\"fn\">into_heatmap_normalized_columns</a>(\n    self,\n) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapF64.html\" title=\"struct sampling::heatmap::HeatmapF64\">HeatmapF64</a>&lt;HistWidth, HistHeight&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-column-wise-normalized-heatmap-1\"><a class=\"doc-anchor\" href=\"#returns-column-wise-normalized-heatmap-1\">§</a>returns (column wise) normalized heatmap</h5>\n<ul>\n<li>returns normalized heatmap as <code>HeatmapF64</code></li>\n<li>Heatmap vector <code>self.heatmap_normalized().heatmap()</code> contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of each column (fixed x) will be 1.0 (within numerical errors), if it contained at least one hit.\nIf it did not, the column will only consist of 0.0</li>\n<li>otherwise the sum of this Vector is 1.0</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.vec_normalized_rows\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#459-485\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.vec_normalized_rows\" class=\"fn\">vec_normalized_rows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.86.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.f64.html\">f64</a>&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-vector-representing-heatmap-normalized-row-wise\"><a class=\"doc-anchor\" href=\"#returns-vector-representing-heatmap-normalized-row-wise\">§</a>returns vector representing heatmap, normalized row wise</h5>\n<ul>\n<li>Vector contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of each row (fixed x) will be 1.0 (within numerical errors), if it contained at least one hit.\nIf it did not, the row will only consist of 0.0</li>\n</ul>\n<h5 id=\"access-indices-understanding-how-the-data-is-mapped-3\"><a class=\"doc-anchor\" href=\"#access-indices-understanding-how-the-data-is-mapped-3\">§</a>Access indices; understanding how the data is mapped</h5>\n<p>A specific heatmap location (x,y)\ncorresponds to the index <code>y * self.width() + x</code></p>\n<ul>\n<li>you can use the function <code>heatmap_index(width, x, y)</code> for calculating the index</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.heatmap_normalized_rows\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#493-507\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.heatmap_normalized_rows\" class=\"fn\">heatmap_normalized_rows</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapF64.html\" title=\"struct sampling::heatmap::HeatmapF64\">HeatmapF64</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistHeight: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    HistWidth: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-row-wise-normalized-heatmap\"><a class=\"doc-anchor\" href=\"#returns-row-wise-normalized-heatmap\">§</a>returns (row wise) normalized heatmap</h5>\n<ul>\n<li>returns normalized heatmap as <code>HeatmapF64</code></li>\n<li>Heatmap vector <code>self.heatmap_normalized().heatmap()</code> contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of each row (fixed x) will be 1.0 (within numerical errors), if it contained at least one hit.\nIf it did not, the row will only consist of 0.0</li>\n<li>otherwise the sum of this Vector is 1.0</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_heatmap_normalized_rows\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#515-527\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.into_heatmap_normalized_rows\" class=\"fn\">into_heatmap_normalized_rows</a>(self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapF64.html\" title=\"struct sampling::heatmap::HeatmapF64\">HeatmapF64</a>&lt;HistWidth, HistHeight&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"returns-row-wise-normalized-heatmap-1\"><a class=\"doc-anchor\" href=\"#returns-row-wise-normalized-heatmap-1\">§</a>returns (row wise) normalized heatmap</h5>\n<ul>\n<li>returns normalized heatmap as <code>HeatmapF64</code></li>\n<li>Heatmap vector <code>self.heatmap_normalized().heatmap()</code> contains only 0.0, if nothing was in the heatmap</li>\n<li>otherwise the sum of each row (fixed x) will be 1.0 (within numerical errors), if it contained at least one hit.\nIf it did not, the row will only consist of 0.0</li>\n<li>otherwise the sum of this Vector is 1.0</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count_multiple\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#535-575\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.count_multiple\" class=\"fn\">count_multiple</a>&lt;A, B, X, Y, I&gt;(\n    &amp;mut self,\n    width_val_iter: I,\n    height_val: B,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>, <a class=\"enum\" href=\"sampling/heatmap/enum.HeatmapError.html\" title=\"enum sampling::heatmap::HeatmapError\">HeatmapError</a>&gt;<div class=\"where\">where\n    HistWidth: <a class=\"trait\" href=\"sampling/histogram/trait.HistogramVal.html\" title=\"trait sampling::histogram::HistogramVal\">HistogramVal</a>&lt;X&gt;,\n    HistHeight: <a class=\"trait\" href=\"sampling/histogram/trait.HistogramVal.html\" title=\"trait sampling::histogram::HistogramVal\">HistogramVal</a>&lt;Y&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;X&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Y&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = A&gt;,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"update-the-heatmap\"><a class=\"doc-anchor\" href=\"#update-the-heatmap\">§</a>update the heatmap</h5>\n<ul>\n<li>calculates the coordinates <code>(x, y)</code> of the bin corresponding\nto the given values pair <code>(width_iter_entry, height_val)</code></li>\n<li>as soon as a coordinate is encountered that is out of bounds, it counts a “miss” and returns the HeatmapError,\naborting further execution</li>\n<li>otherwise it counts the “hits” and returns the total number of hits added <code>usize</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.count\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#582-614\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.count\" class=\"fn\">count</a>&lt;A, B, X, Y&gt;(\n    &amp;mut self,\n    width_val: A,\n    height_val: B,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>), <a class=\"enum\" href=\"sampling/heatmap/enum.HeatmapError.html\" title=\"enum sampling::heatmap::HeatmapError\">HeatmapError</a>&gt;<div class=\"where\">where\n    HistWidth: <a class=\"trait\" href=\"sampling/histogram/trait.HistogramVal.html\" title=\"trait sampling::histogram::HistogramVal\">HistogramVal</a>&lt;X&gt;,\n    HistHeight: <a class=\"trait\" href=\"sampling/histogram/trait.HistogramVal.html\" title=\"trait sampling::histogram::HistogramVal\">HistogramVal</a>&lt;Y&gt;,\n    A: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;X&gt;,\n    B: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Y&gt;,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"update-the-heatmap-1\"><a class=\"doc-anchor\" href=\"#update-the-heatmap-1\">§</a>update the heatmap</h5>\n<ul>\n<li>calculates the coordinate <code>(x, y)</code> of the bin corresponding\nto the given value pair <code>(width_val, height_val)</code></li>\n<li>if coordinate is out of bounds, it counts a “miss” and returns the HeatmapError</li>\n<li>otherwise it counts the “hit” and returns the coordinate <code>(x, y)</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.write_to\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#626-640\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.write_to\" class=\"fn\">write_to</a>&lt;W&gt;(&amp;self, data_file: W) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/std/io/error/type.Result.html\" title=\"type std::io::error::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"write-heatmap-to-file\"><a class=\"doc-anchor\" href=\"#write-heatmap-to-file\">§</a>Write heatmap to file</h5>\n<ul>\n<li>writes data of heatmap to file.</li>\n</ul>\n<h5 id=\"file\"><a class=\"doc-anchor\" href=\"#file\">§</a>file</h5>\n<ul>\n<li>lets assume <code>self.width()</code>is 4 and <code>self.height()</code> is 3</li>\n<li>the resulting file could look like</li>\n</ul>\n<div class=\"example-wrap\"><pre class=\"language-txt\"><code>0 1 0 10\n100 0 0 1\n2 9 1 0</code></pre></div></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gnuplot_quick\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#651-662\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.gnuplot_quick\" class=\"fn\">gnuplot_quick</a>&lt;W&gt;(&amp;self, writer: W) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/std/io/error/type.Result.html\" title=\"type std::io::error::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"create-a-gnuplot-script-to-plot-your-heatmap\"><a class=\"doc-anchor\" href=\"#create-a-gnuplot-script-to-plot-your-heatmap\">§</a>Create a gnuplot script to plot your heatmap</h5>\n<ul>\n<li><code>writer</code>: The gnuplot script will be written to this</li>\n<li><code>gnuplot_output_name</code>: how shall the file, created by executing gnuplot,\nbe called? Ending of file will be set automatically</li>\n</ul>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<ul>\n<li>This is the same as calling <a href=\"sampling/heatmap/struct.HeatmapUsize.html#method.gnuplot\" title=\"method sampling::heatmap::HeatmapUsize::gnuplot\"><code>gnuplot</code></a> with default\n<code>GnuplotSettings</code></li>\n<li>The default axis are the bin indices, which, e.g, means they always\nbegin at 0. You have to set the axis via the <a href=\"sampling/heatmap/struct.GnuplotSettings.html\" title=\"struct sampling::heatmap::GnuplotSettings\">GnuplotSettings</a></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gnuplot\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#728-746\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.gnuplot\" class=\"fn\">gnuplot</a>&lt;W, GS&gt;(&amp;self, gnuplot_writer: W, settings: GS) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.86.0/std/io/error/type.Result.html\" title=\"type std::io::error::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.unit.html\">()</a>&gt;<div class=\"where\">where\n    W: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/std/io/trait.Write.html\" title=\"trait std::io::Write\">Write</a>,\n    GS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;<a class=\"struct\" href=\"sampling/heatmap/struct.GnuplotSettings.html\" title=\"struct sampling::heatmap::GnuplotSettings\">GnuplotSettings</a>&gt;,</div></h4></section></summary><div class=\"docblock\"><h5 id=\"create-a-gnuplot-script-to-plot-your-heatmap-1\"><a class=\"doc-anchor\" href=\"#create-a-gnuplot-script-to-plot-your-heatmap-1\">§</a>Create a gnuplot script to plot your heatmap</h5>\n<p>This function writes a file, that can be plotted via the terminal via <a href=\"http://www.gnuplot.info/\">gnuplot</a></p>\n<div class=\"example-wrap\"><pre class=\"language-bash\"><code>gnuplot gnuplot_file</code></pre></div><h6 id=\"parameter\"><a class=\"doc-anchor\" href=\"#parameter\">§</a>Parameter:</h6>\n<ul>\n<li><code>gnuplot_writer</code>: writer gnuplot script will be written to</li>\n<li><code>gnuplot_output_name</code>: how shall the file, created by executing gnuplot, be called? Ending of file will be set automatically</li>\n<li><code>settings</code>: Here you can set the axis, choose between terminals and more.\nI recommend that you take a look at <a href=\"sampling/heatmap/struct.GnuplotSettings.html\" title=\"struct sampling::heatmap::GnuplotSettings\">GnuplotSettings</a></li>\n</ul>\n<h6 id=\"note-1\"><a class=\"doc-anchor\" href=\"#note-1\">§</a>Note</h6>\n<p>The default axis are the bin indices, which, e.g, means they always\nbegin at 0. You have to set the axis via the <a href=\"sampling/heatmap/struct.GnuplotSettings.html\" title=\"struct sampling::heatmap::GnuplotSettings\">GnuplotSettings</a></p>\n<h6 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h6>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>rand_pcg::Pcg64;\n<span class=\"kw\">use </span>rand::{SeedableRng, distr::<span class=\"kw-2\">*</span>};\n<span class=\"kw\">use </span>sampling::<span class=\"kw-2\">*</span>;\n<span class=\"kw\">use </span>std::fs::File;\n<span class=\"kw\">use </span>std::io::BufWriter;\n \n<span class=\"comment\">// first randomly create a heatmap\n</span><span class=\"kw\">let </span>h_x = HistUsizeFast::new_inclusive(<span class=\"number\">0</span>, <span class=\"number\">10</span>).unwrap();\n<span class=\"kw\">let </span>h_y = HistU8Fast::new_inclusive(<span class=\"number\">0</span>, <span class=\"number\">10</span>).unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>heatmap = HeatmapU::new(h_x, h_y);\nheatmap.count(<span class=\"number\">0</span>, <span class=\"number\">0</span>).unwrap();\nheatmap.count(<span class=\"number\">10</span>, <span class=\"number\">0</span>).unwrap();\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>rng = Pcg64::seed_from_u64(<span class=\"number\">27456487</span>);\n<span class=\"kw\">let </span>x_distr = Uniform::new_inclusive(<span class=\"number\">0</span>, <span class=\"number\">10_usize</span>)\n    .unwrap();\n<span class=\"kw\">let </span>y_distr = Uniform::new_inclusive(<span class=\"number\">0</span>, <span class=\"number\">10_u8</span>)\n    .unwrap();\n\n<span class=\"kw\">for _ in </span><span class=\"number\">0</span>..<span class=\"number\">100000 </span>{\n    <span class=\"kw\">let </span>x = x_distr.sample(<span class=\"kw-2\">&amp;mut </span>rng);\n    <span class=\"kw\">let </span>y = y_distr.sample(<span class=\"kw-2\">&amp;mut </span>rng);\n    heatmap.count(x, y).unwrap();\n}\n \n<span class=\"comment\">// create File for gnuplot script\n</span><span class=\"kw\">let </span>file = File::create(<span class=\"string\">\"heatmap.gp\"</span>).unwrap();\n<span class=\"kw\">let </span>buf = BufWriter::new(file);\n\n<span class=\"comment\">// Choose settings for gnuplot\n</span><span class=\"kw\">let </span><span class=\"kw-2\">mut </span>settings = GnuplotSettings::new();\nsettings.x_axis(GnuplotAxis::new(-<span class=\"number\">5.0</span>, <span class=\"number\">5.0</span>, <span class=\"number\">6</span>))\n    .y_axis(GnuplotAxis::from_slice(<span class=\"kw-2\">&amp;</span>[<span class=\"string\">\"a\"</span>, <span class=\"string\">\"b\"</span>, <span class=\"string\">\"c\"</span>, <span class=\"string\">\"d\"</span>]))\n    .y_label(<span class=\"string\">\"letter\"</span>)\n    .x_label(<span class=\"string\">\"number\"</span>)\n    .title(<span class=\"string\">\"Example\"</span>)\n    .terminal(GnuplotTerminal::PDF(<span class=\"string\">\"heatmap\"</span>.to_owned()));\n\n<span class=\"comment\">// create gnuplot script\n</span>heatmap.gnuplot(\n    buf,\n    settings\n).unwrap();</code></pre></div>\n<p>gnuplot script can now be plotted with</p>\n<div class=\"example-wrap\"><pre class=\"language-bash\"><code>gnuplot heatmap.gp</code></pre></div></div></details></div></details>",0,"sampling::heatmap::heatmap::HeatmapU"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#46-72\">Source</a><a href=\"#impl-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;HistWidth, HistHeight&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistWidth: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    HistHeight: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.86.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#54-71\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.transpose\" class=\"fn\">transpose</a>(&amp;self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistHeight, HistWidth&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"use-this-to-get-a-flipped-heatmap\"><a class=\"doc-anchor\" href=\"#use-this-to-get-a-flipped-heatmap\">§</a>Use this to get a “flipped” heatmap</h5>\n<ul>\n<li>creates a transposed heatmap</li>\n<li>also look at <a href=\"#method.transpose_inplace\"><code>self.transpose_inplace</code></a></li>\n</ul>\n</div></details></div></details>",0,"sampling::heatmap::heatmap::HeatmapU"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#74-164\">Source</a><a href=\"#impl-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;HistWidth, HistHeight&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.transpose_inplace\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#79-91\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.transpose_inplace\" class=\"fn\">transpose_inplace</a>(self) -&gt; <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistHeight, HistWidth&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"use-this-to-get-a-flipped-heatmap\"><a class=\"doc-anchor\" href=\"#use-this-to-get-a-flipped-heatmap\">§</a>Use this to get a “flipped” heatmap</h5>\n<ul>\n<li>transposes the heatmap inplace</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#103-106\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.get\" class=\"fn\">get</a>(&amp;self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns value stored in the heatmap at specified\ncoordinates, or <code>None</code>, if out of Bounds</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_row\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#114-125\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.get_row\" class=\"fn\">get_row</a>(&amp;self, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>]&gt;</h4></section></summary><div class=\"docblock\"><h5 id=\"row-of-the-heatmap\"><a class=\"doc-anchor\" href=\"#row-of-the-heatmap\">§</a>row of the heatmap</h5>\n<ul>\n<li><code>None</code> if out of bounds</li>\n<li>otherwise it is a slice of the row at height <code>y</code></li>\n</ul>\n<h5 id=\"note\"><a class=\"doc-anchor\" href=\"#note\">§</a>Note</h5>\n<ul>\n<li>there is no <code>get_column</code> method, because, due to implementation details,\nit is way less efficient, and could not be returned as slice</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#131-134\">Source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.get_unchecked\" class=\"fn\">get_unchecked</a>(&amp;self, x: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>, y: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns value stored in the heatmap at specified\ncoordinates without performing bound checks.</p>\n<h6 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h6>\n<p><strong>undefined behavior</strong> if coordinates are out of bounds</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.width\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#138-141\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.width\" class=\"fn\">width</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-width-of-the-heatmap\"><a class=\"doc-anchor\" href=\"#returns-width-of-the-heatmap\">§</a>returns width of the heatmap</h5>\n<ul>\n<li>the width is the same size, as the <code>self.width_projection().bin_count()</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.height\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#145-148\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.height\" class=\"fn\">height</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-height-of-the-heatmap\"><a class=\"doc-anchor\" href=\"#returns-height-of-the-heatmap\">§</a>returns height of the heatmap</h5>\n<ul>\n<li>the height is the same size, as the <code>self.height_projection().bin_count()</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.width_hist\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#154-156\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.width_hist\" class=\"fn\">width_hist</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;HistWidth</a></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-reference-to-current-width-histogram\"><a class=\"doc-anchor\" href=\"#returns-reference-to-current-width-histogram\">§</a>Returns reference to current width Histogram</h5>\n<ul>\n<li>histogram used to bin in the “width” direction</li>\n<li>all <code>counts</code> are counted here -&gt; this is a projection of the heatmap</li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.height_hist\" class=\"method\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#161-163\">Source</a><h4 class=\"code-header\">pub fn <a href=\"sampling/heatmap/struct.HeatmapUsize.html#tymethod.height_hist\" class=\"fn\">height_hist</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.86.0/std/primitive.reference.html\">&amp;HistHeight</a></h4></section></summary><div class=\"docblock\"><h5 id=\"returns-reference-to-current-height-histogram\"><a class=\"doc-anchor\" href=\"#returns-reference-to-current-height-histogram\">§</a>Returns reference to current height Histogram</h5>\n<ul>\n<li>histogram used to bin in the “height” direction</li>\n<li>all <code>counts</code> are counted here -&gt; this is a projection of the heatmap</li>\n</ul>\n</div></details></div></details>",0,"sampling::heatmap::heatmap::HeatmapU"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#25\">Source</a><a href=\"#impl-Serialize-for-HeatmapUsize%3CHistWidth,+HistHeight%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;HistWidth, HistHeight&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"sampling/heatmap/struct.HeatmapUsize.html\" title=\"struct sampling::heatmap::HeatmapUsize\">HeatmapUsize</a>&lt;HistWidth, HistHeight&gt;<div class=\"where\">where\n    HistWidth: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    HistHeight: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/sampling/heatmap/heatmap.rs.html#25\">Source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(&amp;self, __serializer: __S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.86.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;__S::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, __S::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.219/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","sampling::heatmap::heatmap::HeatmapU"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[53657]}